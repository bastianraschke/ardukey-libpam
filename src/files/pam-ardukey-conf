#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
ArduKey 2FA
PAM configuration program.

Copyright 2015 Philipp Meisberger, Bastian Raschke.
All rights reserved.
"""

import os
from pamardukey import __version__ as VERSION
from pamardukey.Config import Config


class PAMArduKeyConfiguration(object):
    """
    Configuration program.

    The ConfigParser instance.
    @var ConfigParser
    """
    __mappingFile = None

    def __showConfirmationDialog(self, question = ''):
        """
        Shows confirmation dialog.

        @param string question
        @return boolean
        """

        answer = raw_input(question + ' (Y/n)')

        if ( answer not in ['y', 'Y', ''] ):
            return False
        else:
            return True

    def addUser(self, userName):
        """
        Adds a new user to PAM ArduKey.

        @param string userName
        @return boolean
        """

        ## Confirmation dialog
        if ( self.__showConfirmationDialog('Are you sure you want to add the user "' + userName + '"?') == False ):
            print('Adding user canceled.')
            return False

        ## Users can only change their own configuration
        if ( os.getlogin() != userName ):
            raise Exception('You cannot add another user! Only Root can do that!')

        ## Tries to init mapping file in users home directory
        try:
            mappingFile = Config(os.getenv('HOME') + '/.pam-ardukey.mapping')

            ## Public ID exists in mapping file?
            if ( mappingFile.itemExists('Mapping', 'public_id') ):
                self.__showConfirmationDialog('Public_id already exists! Do you want to override?') == False ):
                print('Adding user canceled.')
                return False

            publicId = raw_input('Please enter your "Public_id": ')

            if ( publicId == '' ):
                raise Exception('Public_id must not be empty!')

            self.__mappingFile.writeString('Mapping', 'Public_id', publicId)

        except Exception as e:
            print('Error occured while parsing mapping file: '+ str(e))
            return False

        return True

    def removeUser(self, userName):
        """
        Removes user from configuration.

        @param string userName
        @return boolean
        """

        ## Confirmation dialog
        if ( self.__showConfirmationDialog('Are you sure you want to remove the user "' + userName + '"?') == False ):
            print('Removing user canceled.')
            return False

        ## Users can only change their own configuration
        if ( os.getlogin() != userName ):
            raise Exception('You cannot add another user! Only Root can do that!')

        return True


if ( __name__ == '__main__' ):

    parser = argparse.ArgumentParser(description = 'PAM ArduKey configuration program:')

    parser.add_argument('--add-user', metavar='NAME', help='Adds a new user.')
    parser.add_argument('--remove-user', metavar='NAME', help='Removes a user.')
    parser.add_argument('--version', '-v', action='version', version='pam-ardukey '+ VERSION, help='Prints version and exits.')

    args = vars(parser.parse_args())

    if ( args['add_user'] ):
        PamFingerprint().addUser(args['add_user'])
    elif ( args['remove_user'] ):
        PamFingerprint().removeUser(args['remove_user'])
    else:
        parser.print_help()

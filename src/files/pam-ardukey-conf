#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
PAM ArduKey configuration program

Copyright 2015 Philipp Meisberger <team@pm-codeworks.de>,
               Bastian Raschke <bastian.raschke@posteo.de>
All rights reserved.
"""

import os
import getpass
import argparse

import pamardukey.configuration as configuration
from pamardukey import __version__ as VERSION


def showConfirmationDialog(question):
    """
    Show confirmation dialog.

    @param string question
    @return bool
    """

    answer = raw_input(question + ' (Y/n)')
    return (answer in ['y', 'Y', ''])

def addUser(userName):
    """
    Add an ArduKey mapping for a user.

    @param string userName
    @return bool
    """

    ## Users can only change their own configuration
    if ( getpass.getuser() != userName ):
        print('You ('+ getpass.getuser() +') cannot add another user ('+ userName +')!')
        return False

    """
    ## Checks if user is root
    if ( os.geteuid() != 0 ):
        print('[Error] You need to have root privileges to add a user!')
        return False
    """

    ## Confirmation dialog
    if ( showConfirmationDialog('Are you sure you want to add the user "' + userName + '"?') == False ):
        print('Adding user canceled.')
        return False

    ## Tries to init mapping file in users home directory
    try:
        mappingFile = configuration.Configuration(os.getenv('HOME') + '/.pam-ardukey.mapping')

        ## Public ID exists in mapping file?
        if ( mappingFile.exists('public_id', 'Mapping') and
            showConfirmationDialog('An ArduKey is already set! Do you want to override the configuration?') == False ):
            print('Adding user canceled.')
            return False

        publicId = raw_input('Please enter the public id of your ArduKey: ')

        if ( publicId == '' ):
            raise Exception('public_id must not be empty!')

        mappingFile.set('public_id', publicId, 'Mapping')

        if ( mappingFile.saveFile() == False ):
            raise Exception('Could not save configuration file in home directory!')

        print('Successfully added the user "'+ userName +'"!')

    except Exception as e:
        print('Error occured while creating mapping file: ' + str(e))
        return False

    return True

def removeUser(userName):
    """
    Remove the ArduKey mapping of a user.

    @param string userName
    @return bool
    """

    ## Users can only change their own configuration
    if ( getpass.getuser() != userName ):
        print('You ('+ getpass.getuser() +') cannot add another user ('+ userName +')!')
        return False

    """
    ## Checks if user is root
    if ( os.geteuid() != 0 ):
        print('[Error] You need to have root privileges to add a user!')
        return False
    """

    ## Confirmation dialog
    if ( showConfirmationDialog('Are you sure you want to remove the user "' + userName + '"?') == False ):
        print('Removing user canceled.')
        return False

   ## Tries to init mapping file in users home directory
    try:
        os.remove(os.getenv('HOME') + '/.pam-ardukey.mapping')
        print('Successfully removed the user "'+ userName +'"!')

    except Exception as e:
        print('Error occured while removing mapping file: ' + str(e))
        return False

    return True


if ( __name__ == '__main__' ):

    parser = argparse.ArgumentParser(add_help=True,
        description='PAM ArduKey configuration program ' + VERSION)

    parser.add_argument('-v', '--version',
        action='version',
        version='PAM ArduKey configuration program ' + VERSION,
        help='Print version and exit.'
    )

    parser.add_argument('--add-user',
        action='store',
        default=False,
        required=False,
        nargs=1,
        metavar='NAME',
        type=str,
        help='Add a new user.'
    )

    parser.add_argument('--remove-user',
        action='store',
        default=False,
        required=False,
        nargs=1,
        metavar='NAME',
        type=str,
        help='Remove a user.'
    )

    args = vars(parser.parse_args())

    if ( args['add_user'] ):
        addUser(args['add_user'][0])

    elif ( args['remove_user'] ):
        removeUser(args['remove_user'][0])

    else:
        parser.print_help()
